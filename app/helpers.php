<?php

/**
 * Global helpers file with misc functions.
 */


use Illuminate\Pagination\LengthAwarePaginator;

if (! function_exists('app_name')) {
    /**
     * Helper to grab the application name.
     *
     * @return mixed
     */
    function app_name()
    {
        return config('app.name');
    }
}

if (! function_exists('access')) {
    /**
     * Access (lol) the Access:: facade as a simple function.
     */
    function access()
    {
        return app('access');
    }
}

if (! function_exists('history')) {
    /**
     * Access the history facade anywhere.
     */
    function history()
    {
        return app('history');
    }
}

if (! function_exists('gravatar')) {
    /**
     * Access the gravatar helper.
     */
    function gravatar()
    {
        return app('gravatar');
    }
}

if (! function_exists('includeRouteFiles')) {

    /**
     * Loops through a folder and requires all PHP files
     * Searches sub-directories as well.
     *
     * @param $folder
     */
    function includeRouteFiles($folder)
    {
        try {
            $rdi = new recursiveDirectoryIterator($folder);
            $it = new recursiveIteratorIterator($rdi);

            while ($it->valid()) {
                if (! $it->isDot() && $it->isFile() && $it->isReadable() && $it->current()->getExtension() === 'php') {
                    require $it->key();
                }

                $it->next();
            }
        } catch (Exception $e) {
            echo $e->getMessage();
        }
    }
}

if (! function_exists('getRtlCss')) {

    /**
     * The path being passed is generated by Laravel Mix manifest file
     * The webpack plugin takes the css filenames and appends rtl before the .css extension
     * So we take the original and place that in and send back the path.
     *
     * @param $path
     *
     * @return string
     */
    function getRtlCss($path)
    {
        $path = explode('/', $path);
        $filename = end($path);
        array_pop($path);
        $filename = rtrim($filename, '.css');

        return implode('/', $path).'/'.$filename.'.rtl.css';
    }
}

if (! function_exists('homeRoute')) {

    /**
     * Return the route to the "home" page depending on authentication/authorization status.
     *
     * @return string
     */
    function homeRoute()
    {
        if (access()->allow('view-backend')) {
            return 'admin.dashboard';
        } elseif (auth()->check()) {
            return 'frontend.user.dashboard';
        }

        return 'frontend.index';
    }

}

if (! function_exists('getBrowser')) {

    /**
     *
     *
     * @return string
     */
    function getBrowser()
    {
        //dd($_SERVER['HTTP_USER_AGENT']);
        if(isset($_SERVER['HTTP_USER_AGENT'])) {
            $u_agent = $_SERVER['HTTP_USER_AGENT'];
            //dd($_SERVER['HTTP_USER_AGENT']);
        }else{$u_agent = 'niet bekend | helpers.php 133';}
        $bname = 'Unknown';
        $platform = 'Unknown';
        $version= "";

        //First get the platform? http://www.phphulp.nl/php/tutorial/php-functies/regular-expressions/520/het-gebruik-van-character-classes/1289/
        // i   staat voor , zie link
        if (preg_match('/linux/i', $u_agent)) {
            $platform = 'Linux';
        }
        elseif (preg_match('/macintosh|mac os x/i', $u_agent)) {
            $platform = 'Mac';
        }
        elseif (preg_match('/windows|win32/i', $u_agent)) {
            $platform = 'Windows';
        }

        // Next get the name of the useragent yes seperately and for good reason
        // orgineel ****   if(preg_match('/MSIE/i',$u_agent) && !preg_match('/Opera/i',$u_agent))
        if(preg_match('/Edge/i',$u_agent))                //dec 2015 erbij gemaakt
        {
            $bname = 'MS-Edge';
            $ub = "Edge";                      // let op hoofdletters
        }
        elseif(preg_match('/MSIE/i',$u_agent) && !preg_match('/Opera/i',$u_agent))
        {
            $bname = 'Internet Explorer';
            $ub = "MSIE";                      // let op hoofdletters
        }
        elseif(preg_match('/trident/i',$u_agent) )
        {
            $bname = 'Internet Explorer';
            $ub = "Trident";                 // let op hoofdletters
        }
        elseif(preg_match('/Firefox/i',$u_agent))
        {
            $bname = 'Mozilla Firefox';
            $ub = "Firefox";
        }
        elseif(preg_match('/Chrome/i',$u_agent))
        {
            $bname = 'Google Chrome';
            $ub = "Chrome";
        }
        elseif(preg_match('/Safari/i',$u_agent))
        {
            $bname = 'Apple Safari';
            $ub = "Safari";
        }
        elseif(preg_match('/Opera/i',$u_agent))
        {
            $bname = 'Opera';
            $ub = "Opera";
        }
        elseif(preg_match('/Netscape/i',$u_agent))
        {
            $bname = 'Netscape';
            $ub = "Netscape";
        }
        elseif(preg_match('/bingbot/i',$u_agent))                       //MJE
        {
            $bname = 'Bingbot';
            $ub = "bingbot";     // geen hoofdletter
        }

        // finally get the correct version number
        if(isset($ub))
        {                                                  // MJE

            $known = array('Version', $ub, 'other');

            $pattern = '#(?<browser>' . join('|', $known) .
                ')[/7.0; rv:]+(?<version>[0-9.|a-zA-Z.]*)#';                // orgineel (i.v.m. MSIE default)     ')[/ ]+(?<version>[0-9.|a-zA-Z.]*)#';
            if (!preg_match_all($pattern, $u_agent, $matches)) {
                // we have no matching number just continue
            }

            // see how many we have
            //$i = count($matches['browser']);  // orgineel
            $i = count($matches['browser']);
            if ($i != 1) {
                //we will have two since we are not using 'other' argument yet
                //see if version is before or after the name
                if (strripos($u_agent,"Version") < strripos($u_agent,$ub)){
                    $version= $matches['version'][0];
                }
                else {
                    $version= $matches['version'][1];
                }
            }
            else {
                $version= $matches['version'][0] ;
            }

            // check if we have a number
            if ($version==null || $version=="") {$version="?";}
        }else {                                                                   // alles MJE
            return array(
                'userAgent' => $u_agent,
                'name'      => $bname,
                'version'   => $version,
                'platform'  => $platform
            );
            exit();
        }


        return array(
            'userAgent' => $u_agent,
            'name'      => $bname,
            'version'   => $version,
            'platform'  => $platform


        );
    }
    if (! function_exists('paginatehier')) {


        /**
         * MJE function paginate
         */
        function paginatehier($photo_all)
        {
            //alle fotos ID die aan de voorwaardes van hiervoor voldoen
            foreach($photo_all as $sleutel=>$waarde){
                //echo '<br>'.$sleutel .' => '.$waarde->id;                                          //bij testen aanzetten
                $temp[] = $waarde->id ;
            }
            //var_dump($temp);

            // -----pagination----css bootstrap---https://laravel.com/docs/5.5/pagination#displaying-pagination-results--

            //altijd beginnen bij de 1e pagina
            if(!isset($_GET['page'])){
                $_GET['page'] = 1;
            }
            //als de waarde niet nummeric is heeft de user de url veranderd , dus wil ik dat pagina 1 wordt getoond
            if(!is_numeric($_GET['page']) ){
                $_GET['page'] = 1;
            }

            $perpagina = 5;  //aantal fotos per pagina ,  ook in paginationMje
            $output = array_slice($temp, ($_GET['page'] - 1)*$perpagina, $perpagina );
            //var_dump($output);  //alle fotos ID die we nodig hebben voor deze pagina               //bij testen aanzetten
            //dd($output);

            //als de user de url ?page zelf heeft veranderd , laat pagina 1 zien
            if(empty($output)){
                $_GET['page'] = 1;
                $output = array_slice($temp, ($_GET['page'] - 1)*$perpagina, $perpagina );
                //dd('kan niet' , __FILE__ , __LINE__);
                //flash('Page does not exist !!')->warning();
                //return view('frontend.user.photo.index' );
            }

            foreach($photo_all as $sleutel=>$waarde){

                if(in_array($waarde->id, $output)){
                    //echo '<br>'.$sleutel .' => '.$waarde->id;                                     //bij testen aanzetten
                    $tooncollectie_deel[] = $waarde ;   //zet de fotos van deze pagina weer in een array met Objects
                    //$tooncollectie_deel[] = $waarde->id ;  //alleen id
                }
            }
            //dd($tooncollectie_deel);                      //alleen id

            //$options = array('path'=>'http://budelc.app/photo');  //array $options = [] (path, query, fragment, pageName)  ,
            $options = array('path'=>url()->current());  //beter zo
            $photo = new LengthAwarePaginator($tooncollectie_deel , count($photo_all) , $perpagina , $_GET['page'] , $options);  // $items, $total, $perPage, $currentPage = null

            /*
                    $photo->count()
                    $photo->currentPage()
                    $photo->firstItem()
                    $photo->hasMorePages()
                    $photo->lastItem()
                    $photo->lastPage() (Not available when using simplePaginate)
                    $photo->nextPageUrl()
                    $photo->perPage()
                    $photo->previousPageUrl()
                    $photo->total() (Not available when using simplePaginate)
                    $photo->url($page)
            */

            //dd($photo , 'aantal fotos pag. '.$photo->currentPage().' = '.$photo->count() , 'last page = '.$photo->lastPage() , ' next page url = '.$photo->nextPageUrl() , ' totaal aantal fotos = '.$photo->total());
            //dd('current url = '.url()->current() , $photo_all ,   new \ReflectionClass($photo_all) , $photo ,   new \ReflectionClass($photo));

            return $photo ;
        }

    }
}